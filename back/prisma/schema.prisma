// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  password      String
  email         String   @unique
  last_login    DateTime @updatedAt
  date_of_birth String?

  portfolioPages PortfolioPage[]

  @@map(name: "users")
}

model PortfolioPage {
  id              Int     @id @default(autoincrement())
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int     @unique
  published       Boolean @default(false)
  contact_address String  @default("Not set")
  max_item        Int     @default(3)
  max_depth       Int     @default(1)
  max_score       Int     @default(1)

  radercharts PortfolioRaderChart[]
  raderleafs  PortfolioRaderChartLeaf[]

  @@map(name: "portfolio_pages")
}

model PortfolioRaderChartLeaf {
  id      Int                 @id @default(autoincrement())
  name    String
  score   Int                 @default(0)
  raderId Int
  pageId  Int
  rader   PortfolioRaderChart @relation(fields: [raderId], references: [id], onDelete: Cascade)
  page    PortfolioPage       @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map(name: "portfolio_rader_chart_leaf")
}

model PortfolioRaderChart {
  id        Int                           @id @default(autoincrement())
  name      String
  pageId    Int
  max_score Int                           @default(1)
  page      PortfolioPage                 @relation(fields: [pageId], references: [id], onDelete: Cascade)
  leafs     PortfolioRaderChartLeaf[]
  parents   PortfolioRaderChartRelation[] @relation("Parent")
  children  PortfolioRaderChartRelation[] @relation("Child")

  @@map(name: "portfolio_rader_chart")
}

model PortfolioRaderChartRelation {
  parentId Int
  childId  Int
  depth    Int

  parent PortfolioRaderChart @relation("Parent", fields: [parentId], references: [id], onDelete: Cascade)
  child  PortfolioRaderChart @relation("Child", fields: [childId], references: [id])

  @@id([parentId, childId])
  @@map(name: "portfolio_radar_chart_relation")
}
